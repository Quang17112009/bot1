import os
import asyncio
import aiohttp
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import json
import logging
from datetime import date, datetime, timedelta

# Import c√°c module t√πy ch·ªânh
from keep_alive import keep_alive
import database # ƒê·ªÉ t∆∞∆°ng t√°c v·ªõi SQLite
import prediction_engine # ƒê·ªÉ s·ª≠ d·ª•ng c√°c AI d·ª± ƒëo√°n

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO # ƒê·∫∑t INFO ƒë·ªÉ xem log quan tr·ªçng, DEBUG ƒë·ªÉ xem t·∫•t c·∫£
)
logger = logging.getLogger(__name__)

# --- C·∫•u h√¨nh Bot (S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng - KHUY·∫æN NGH·ªä B·∫¢O M·∫¨T) ---
# L·∫•y token bot Telegram t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") 
# L·∫•y ID Telegram admin t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
ADMIN_ID_STR = os.getenv("ADMIN_ID") # L·∫•y d∆∞·ªõi d·∫°ng chu·ªói
ADMIN_ID = None
try:
    if ADMIN_ID_STR:
        ADMIN_ID = int(ADMIN_ID_STR)
except ValueError:
    logger.critical("ADMIN_ID trong bi·∫øn m√¥i tr∆∞·ªùng kh√¥ng ph·∫£i l√† s·ªë nguy√™n h·ª£p l·ªá.")

# C√°c ki·ªÉm tra ƒë·∫£m b·∫£o gi√° tr·ªã h·ª£p l·ªá
if not isinstance(TELEGRAM_TOKEN, str) or not TELEGRAM_TOKEN:
    logger.critical("TELEGRAM_TOKEN kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã thi·∫øu. Bot kh√¥ng th·ªÉ kh·ªüi ƒë·ªông.")
    exit(1)

if not isinstance(ADMIN_ID, int) or ADMIN_ID <= 0:
    logger.critical("ADMIN_ID kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã thi·∫øu. Bot kh√¥ng th·ªÉ kh·ªüi ƒë·ªông.")
    exit(1)


HTTP_API_URL = "https://apisunwin1.up.railway.app/api/taixiu"

# Danh s√°ch user_id c·ªßa c√°c c·ªông t√°c vi√™n (CTV)
# ƒê·ªÉ ƒë∆°n gi·∫£n, v·∫´n l∆∞u trong b·ªô nh·ªõ. D√πng DB n·∫øu mu·ªën b·ªÅn v·ªØng h∆°n th√¨ c·∫ßn l∆∞u v√†o SQLite
CTV_IDS = set() 

# Dictionary ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin ng∆∞·ªùi d√πng (ng√†y h·∫øt h·∫°n, xu). 
# ƒê·ªÉ ƒë∆°n gi·∫£n, v·∫´n l∆∞u trong b·ªô nh·ªõ. D√πng DB n·∫øu mu·ªën b·ªÅn v·ªØng h∆°n th√¨ c·∫ßn l∆∞u v√†o SQLite
# Format: {user_id: {"expiration_date": "YYYY-MM-DD", "xu": 0}}
user_data = {} 


# --- H√†m ki·ªÉm tra quy·ªÅn ---
def is_admin(user_id):
    return user_id == ADMIN_ID


def is_ctv_or_admin(user_id):
    return user_id == ADMIN_ID or user_id in CTV_IDS


# --- C√°c l·ªánh c∆° b·∫£n ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in user_data:
        # M·∫∑c ƒë·ªãnh th√™m ng∆∞·ªùi d√πng m·ªõi v·ªõi 0 xu v√† ng√†y h·∫øt h·∫°n h√¥m nay
        user_data[user.id] = {"expiration_date": date.today().strftime("%Y-%m-%d"), "xu": 0}
        logger.info(f"Ng∆∞·ªùi d√πng m·ªõi ƒë√£ t∆∞∆°ng t√°c: {user.id}")

    await update.message.reply_text(
        f"Xin ch√†o {user.full_name!s}! üé≤ Ch√†o m·ª´ng ƒë·∫øn v·ªõi BOT SUNWIN T√ÄI X·ªàU D·ª∞ ƒêO√ÅN\n"
        "G√µ /help ƒë·ªÉ xem c√°c l·ªánh c√≥ th·ªÉ s·ª≠ d·ª•ng."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üëã C√°c l·ªánh c√≥ s·∫µn:
/start - B·∫Øt ƒë·∫ßu v√† nh·∫≠n th√¥ng b√°o ch√†o m·ª´ng.
/help - Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh.
/support - Li√™n h·ªá h·ªó tr·ª£.
/gia - Xem b·∫£ng gi√° d·ªãch v·ª•.
/gopy <n·ªôi dung> - G·ª≠i g√≥p √Ω t·ªõi Admin.
/nap - H∆∞·ªõng d·∫´n n·∫°p ti·ªÅn mua l∆∞·ª£t.
/taixiu - Xem k·∫øt qu·∫£ T√†i X·ªâu m·ªõi nh·∫•t v√† d·ª± ƒëo√°n.

üîë L·ªánh d√†nh cho Admin/CTV:
/full - Xem chi ti·∫øt th√¥ng tin ng∆∞·ªùi d√πng (Admin/CTV).
/giahan <id> <ng√†y> - Gia h·∫°n cho ng∆∞·ªùi d√πng (Admin/CTV).

üëë L·ªánh d√†nh cho Admin ch√≠nh:
/ctv <id> - Th√™m CTV.
/xoactv <id> - X√≥a CTV.
/tb <n·ªôi dung> - G·ª≠i th√¥ng b√°o t·ªõi t·∫•t c·∫£ ng∆∞·ªùi d√πng.
    """
    await update.message.reply_text(help_text)


async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá:\n"
        "Telegram: @heheviptool\n"
        "Gmail: nhutquangdzs1@gmail.com"
    )


async def gia(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        """
        BOT SUNWIN XIN TH√îNG B√ÅO B·∫¢NG GI√Å SUN BOT
        20k 1 Ng√†y
        50k 1 Tu·∫ßn
        80k 2 Tu·∫ßn
        130k 1 Th√°ng
        BOT SUN T·ªà L·ªá 85-92%
        ƒê·ªåC 24/24 Vui L√≤ng ib @heheviptool ƒê·ªÉ Gia H·∫°n
        """
    )


async def gopy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p n·ªôi dung g√≥p √Ω. V√≠ d·ª•: /gopy Bot r·∫•t hay!")
        return

    gopy_text = " ".join(context.args)
    user = update.effective_user
    message_to_admin = (
        f"G√ìP √ù M·ªöI t·ª´ @{user.username or user.full_name!s} (ID: {user.id}):\n\n"
        f"N·ªôi dung: {gopy_text}"
    )

    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=message_to_admin)
        await update.message.reply_text("‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i g√≥p √Ω! Admin ƒë√£ nh·∫≠n ƒë∆∞·ª£c.")
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i g√≥p √Ω ƒë·∫øn admin: {e}")
        await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i g√≥p √Ω. Vui l√≤ng th·ª≠ l·∫°i sau.")


async def nap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    nap_text = f"""
    ‚öúÔ∏è N·∫†P TI·ªÄN MUA L∆Ø·ª¢T ‚öúÔ∏è

    ƒê·ªÉ mua l∆∞·ª£t, vui l√≤ng chuy·ªÉn kho·∫£n ƒë·∫øn:
    - Ng√¢n h√†ng: MB BANK
    - S·ªë t√†i kho·∫£n: 0939766383
    - T√™n ch·ªß TK: Nguyen Huynh Nhut Quang

    ‚ùóÔ∏è N·ªôi dung chuy·ªÉn kho·∫£n (QUAN TR·ªåNG):
    mua luot {{user_id}}

    ‚ùóÔ∏è N·ªôi dung b·∫Øt bu·ªôc c·ªßa b·∫°n l√†:
    mua luot {user_id}

    (Vui l√≤ng sao ch√©p ƒë√∫ng n·ªôi dung tr√™n ƒë·ªÉ ƒë∆∞·ª£c c·ªông l∆∞·ª£t t·ª± ƒë·ªông)
    Sau khi chuy·ªÉn kho·∫£n, vui l√≤ng ch·ªù 1-2 ph√∫t v√† ki·ªÉm tra b·∫±ng l·ªánh /luot. N·∫øu c√≥ s·ª± c·ªë, h√£y d√πng l·ªánh /support.
    """
    await update.message.reply_text(nap_text)

# --- H√†m chung ƒë·ªÉ x·ª≠ l√Ω v√† g·ª≠i th√¥ng b√°o T√†i X·ªâu ---
# H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi b·ªüi t√°c v·ª• ƒë·ªãnh k·ª≥ v√† l·ªánh /taixiu
async def process_and_send_taixiu(context: ContextTypes.DEFAULT_TYPE, target_chat_id: int = None):
    """
    L·∫•y d·ªØ li·ªáu API, x·ª≠ l√Ω, c·∫≠p nh·∫≠t DB v√† g·ª≠i th√¥ng b√°o.
    N·∫øu target_chat_id ƒë∆∞·ª£c cung c·∫•p, ch·ªâ g·ª≠i t·ªõi chat ƒë√≥ (d√πng cho l·ªánh /taixiu).
    N·∫øu target_chat_id l√† None, g·ª≠i t·ªõi t·∫•t c·∫£ ng∆∞·ªùi d√πng h·ª£p l·ªá (d√πng cho t√°c v·ª• ƒë·ªãnh k·ª≥).
    """
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(HTTP_API_URL) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    ket_qua_display = data.get('Ket_qua', 'N/A')
                    phien_number = data.get('Phien', 0) 
                    tong = data.get('Tong', 0)
                    xuc_xac_1 = data.get('Xuc_xac_1', 0)
                    xuc_xac_2 = data.get('Xuc_xac_2', 0)
                    xuc_xac_3 = data.get('Xuc_xac_3', 0) 

                    actual_result_char = None
                    if ket_qua_display == 'T√†i':
                        actual_result_char = 'T'
                    elif ket_qua_display == 'X·ªâu':
                        actual_result_char = 'X'

                    if actual_result_char:
                        is_new_phien = False
                        if target_chat_id is None: # Ch·ªâ ki·ªÉm tra phi√™n m·ªõi n·∫øu l√† t√°c v·ª• ƒë·ªãnh k·ª≥ (g·ª≠i cho t·∫•t c·∫£)
                            last_processed_phien = int(database.get_app_setting('last_processed_phien') or '0')
                            if phien_number > last_processed_phien:
                                is_new_phien = True
                                logger.info(f"Ph√°t hi·ªán phi√™n m·ªõi: {phien_number}. Phi√™n cu·ªëi ƒë√£ x·ª≠ l√Ω: {last_processed_phien}")
                            else:
                                logger.debug(f"Phi√™n {phien_number} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω. Kh√¥ng c√≥ phi√™n m·ªõi ƒë·ªÉ th√¥ng b√°o t·ª± ƒë·ªông.")
                                return # Kh√¥ng c√≥ phi√™n m·ªõi, tho√°t kh·ªèi h√†m

                        # N·∫øu l√† phi√™n m·ªõi (t·ª´ t√°c v·ª• ƒë·ªãnh k·ª≥) HO·∫∂C l√† l·ªánh /taixiu th·ªß c√¥ng, th√¨ c·∫≠p nh·∫≠t DB v√† AI
                        if is_new_phien or target_chat_id is not None:
                            database.add_result(phien_number, ket_qua_display, actual_result_char, tong, xuc_xac_1, xuc_xac_2, xuc_xac_3)
                            # C·∫≠p nh·∫≠t phi√™n cu·ªëi c√πng ƒë√£ x·ª≠ l√Ω n·∫øu l√† t√°c v·ª• ƒë·ªãnh k·ª≥
                            if is_new_phien:
                                database.update_app_setting('last_processed_phien', str(phien_number))
                        
                        # L·∫•y d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n v√† hi·ªÉn th·ªã (lu√¥n l√†m, d√π l√† phi√™n m·ªõi hay c≈©)
                        history = database.get_latest_history()
                        ai_scores = database.get_ai_scores()
                        ai2_consecutive_errors = database.get_ai_state('ai2_defensive')

                        final_prediction_display, ai_individual_predictions = prediction_engine.ensemble_predict(
                            history, ai_scores, ai2_consecutive_errors
                        )

                        # Ch·ªâ c·∫≠p nh·∫≠t ƒëi·ªÉm AI n·∫øu ƒë√¢y l√† phi√™n M·ªöI ƒë∆∞·ª£c x·ª≠ l√Ω (tr√°nh c·∫≠p nh·∫≠t nhi·ªÅu l·∫ßn)
                        if is_new_phien:
                            prediction_engine.update_ai_scores_and_states(
                                actual_result_char, 
                                ai_individual_predictions, 
                                ai_scores, 
                                ai2_consecutive_errors, 
                                database.update_ai_score, 
                                database.update_ai_state  
                            )
                        
                        # T·∫°o tin nh·∫Øn
                        message = f"""üé≤ <b>K·∫øt qu·∫£ phi√™n m·ªõi nh·∫•t:</b>
Phi√™n: <code>{phien_number}</code>
K·∫øt qu·∫£: <b><span style="color:{"#4CAF50" if actual_result_char == "T" else "#FF5722"};">{ket_qua_display}</span></b>
T·ªïng: <b>{tong}</b> ({ket_qua_display})
X√∫c x·∫Øc: <code>{xuc_xac_1}</code>, <code>{xuc_xac_2}</code>, <code>{xuc_xac_3}</code>

‚ú® <b>D·ª± ƒëo√°n phi√™n ti·∫øp theo:</b> <b>{final_prediction_display}</b>

<pre>
--- Th·ªëng k√™ AI ---
AI Trend: {ai_scores.get('ai1_trend', 0):.0f} ƒëi·ªÉm
AI Defensive: {ai_scores.get('ai2_defensive', 0):.0f} ƒëi·ªÉm (L·ªói li√™n ti·∫øp: {ai2_consecutive_errors})
AI Pattern: {ai_scores.get('ai3_pattern', 0):.0f} ƒëi·ªÉm
</pre>
"""
                        # G·ª≠i tin nh·∫Øn
                        if target_chat_id: # G·ª≠i cho m·ªôt chat c·ª• th·ªÉ (l·ªánh /taixiu)
                            await context.bot.send_message(chat_id=target_chat_id, text=message, parse_mode='HTML')
                        else: # G·ª≠i cho t·∫•t c·∫£ ng∆∞·ªùi d√πng h·ª£p l·ªá (t√°c v·ª• ƒë·ªãnh k·ª≥)
                            for uid in list(user_data.keys()): # L·∫∑p qua b·∫£n sao c·ªßa keys ƒë·ªÉ tr√°nh l·ªói thay ƒë·ªïi k√≠ch th∆∞·ªõc
                                try:
                                    user_info = user_data.get(uid)
                                    if user_info and datetime.strptime(user_info["expiration_date"], "%Y-%m-%d").date() >= date.today():
                                        await context.bot.send_message(chat_id=uid, text=message, parse_mode='HTML')
                                        await asyncio.sleep(0.1) # Tr√°nh b·ªã flood
                                    # else:
                                    #     logger.debug(f"Kh√¥ng g·ª≠i th√¥ng b√°o t·ªõi user {uid} v√¨ ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu.")
                                except Exception as e:
                                    logger.warning(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o t·ª± ƒë·ªông t·ªõi ng∆∞·ªùi d√πng {uid}: {e}")
                            logger.info(f"ƒê√£ x·ª≠ l√Ω v√† th√¥ng b√°o phi√™n {phien_number} cho t·∫•t c·∫£ ng∆∞·ªùi d√πng.")

                    else:
                        error_message = f"‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ server T√†i X·ªâu. Vui l√≤ng th·ª≠ l·∫°i sau. (Status: {resp.status})"
                        logger.warning(error_message)
                        if target_chat_id: # Ch·ªâ g·ª≠i l·ªói cho ng∆∞·ªùi d√πng n·∫øu h·ªç g·ªçi l·ªánh th·ªß c√¥ng
                            await context.bot.send_message(chat_id=target_chat_id, text=error_message)

        except aiohttp.ClientError as e:
            error_message = f"‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn server T√†i X·ªâu: {e!s}. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c API."
            logger.error(error_message, exc_info=True)
            if target_chat_id:
                await context.bot.send_message(chat_id=target_chat_id, text=error_message)
        except json.JSONDecodeError as e:
            error_message = f"‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu t·ª´ server: D·ªØ li·ªáu kh√¥ng ph·∫£i JSON h·ª£p l·ªá. Chi ti·∫øt: {e!s}"
            logger.error(error_message, exc_info=True)
            if target_chat_id:
                await context.bot.send_message(chat_id=target_chat_id, text=error_message)
        except Exception as e:
            error_message = f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh ƒë√£ x·∫£y ra: {e!s}. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£."
            logger.error(error_message, exc_info=True)
            if target_chat_id:
                await context.bot.send_message(chat_id=target_chat_id, text=error_message)

# L·ªánh T√†i X·ªâu (ng∆∞·ªùi d√πng g·ªçi th·ªß c√¥ng)
async def taixiu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await process_and_send_taixiu(context, target_chat_id=user_id)

# H√†m g·ªçi b·ªüi JobQueue ƒë·ªÉ ki·ªÉm tra phi√™n m·ªõi t·ª± ƒë·ªông
async def check_for_new_phien(context: ContextTypes.DEFAULT_TYPE):
    # G·ªçi h√†m x·ª≠ l√Ω chung, kh√¥ng cung c·∫•p target_chat_id ƒë·ªÉ n√≥ g·ª≠i cho t·∫•t c·∫£ ng∆∞·ªùi d√πng
    await process_and_send_taixiu(context)


# --- L·ªánh d√†nh cho Admin/CTV ---
async def full(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_ctv_or_admin(user_id):
        await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    target_user_id = user_id # M·∫∑c ƒë·ªãnh l√† xem th√¥ng tin c·ªßa ch√≠nh ng∆∞·ªùi d√πng
    if context.args and context.args[0].isdigit():
        target_user_id = int(context.args[0])

    if target_user_id in user_data:
        info = user_data[target_user_id]
        message = (
            f"Chi ti·∫øt ng∆∞·ªùi d√πng ID: {target_user_id}\n"
            f"Ng√†y h·∫øt h·∫°n: {info.get('expiration_date', 'N/A')}\n"
            f"S·ªë xu: {info.get('xu', 0)}\n"
            f"L√† CTV: {'C√≥' if target_user_id in CTV_IDS else 'Kh√¥ng'}"
        )
    else:
        message = f"Kh√¥ng t√¨m th·∫•y th√¥ng tin cho ng∆∞·ªùi d√πng ID: {target_user_id}. (Ch·ªâ l∆∞u trong RAM n·∫øu ng∆∞·ªùi d√πng ch∆∞a t∆∞∆°ng t√°c)"
    await update.message.reply_text(message)


async def giahan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_ctv_or_admin(user_id):
        await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    if len(context.args) != 2 or not context.args[0].isdigit() or not context.args[1].isdigit():
        await update.message.reply_text(
            "Sai c√∫ ph√°p. S·ª≠ d·ª•ng: /giahan <ID ng∆∞·ªùi d√πng> <s·ªë ng√†y>"
        )
        return

    target_user_id = int(context.args[0])
    days_to_add = int(context.args[1])

    # N·∫øu ng∆∞·ªùi d√πng ch∆∞a c√≥ trong user_data (RAM), th√™m m·ªõi v·ªõi ng√†y h·∫øt h·∫°n t·ª´ h√¥m nay
    if target_user_id not in user_data:
        current_exp_date = date.today()
        user_data[target_user_id] = {"xu": 0} # M·∫∑c ƒë·ªãnh 0 xu
    else:
        # C·∫≠p nh·∫≠t ng√†y h·∫øt h·∫°n cho ng∆∞·ªùi d√πng hi·ªán c√≥
        current_exp_str = user_data[target_user_id].get("expiration_date", date.today().strftime("%Y-%m-%d"))
        try:
            current_exp_date = datetime.strptime(current_exp_str, "%Y-%m-%d").date()
        except ValueError: # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ng√†y kh√¥ng h·ª£p l·ªá, m·∫∑c ƒë·ªãnh t·ª´ h√¥m nay
            current_exp_date = date.today()
            logger.warning(f"Ng√†y h·∫øt h·∫°n '{current_exp_str}' c·ªßa user {target_user_id} kh√¥ng h·ª£p l·ªá, ƒë·∫∑t l·∫°i t·ª´ h√¥m nay.")

    new_expiration_date = current_exp_date + timedelta(days=days_to_add)
    user_data[target_user_id]["expiration_date"] = new_expiration_date.strftime("%Y-%m-%d")

    await update.message.reply_text(
        f"‚úÖ Gia h·∫°n th√†nh c√¥ng cho ng∆∞·ªùi d√πng ID {target_user_id} th√™m {days_to_add} ng√†y. "
        f"Ng√†y h·∫øt h·∫°n m·ªõi: {new_expiration_date.strftime('%Y-%m-%d')}"
    )
    # C·ªë g·∫Øng th√¥ng b√°o cho ng∆∞·ªùi d√πng ƒë∆∞·ª£c gia h·∫°n
    try:
        await context.bot.send_message(chat_id=target_user_id, text=f"üéâ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c gia h·∫°n th√™m {days_to_add} ng√†y. Ng√†y h·∫øt h·∫°n m·ªõi: {new_expiration_date.strftime('%Y-%m-%d')}")
    except Exception as e:
        logger.warning(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o gia h·∫°n t·ªõi ng∆∞·ªùi d√πng {target_user_id}: {e}")


# --- L·ªánh d√†nh ri√™ng cho Admin ch√≠nh ---
async def ctv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå B·∫°n kh√¥ng ph·∫£i Admin ch√≠nh ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("Sai c√∫ ph√°p. S·ª≠ d·ª•ng: /ctv <ID ng∆∞·ªùi d√πng>")
        return

    target_user_id = int(context.args[0])
    CTV_IDS.add(target_user_id)
    await update.message.reply_text(f"‚úÖ Ng∆∞·ªùi d√πng ID {target_user_id} ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch CTV.")


async def xoactv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå B·∫°n kh√¥ng ph·∫£i Admin ch√≠nh ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("Sai c√∫ ph√°p. S·ª≠ d·ª•ng: /xoactv <ID ng∆∞·ªùi d√πng>")
        return

    target_user_id = int(context.args[0])
    try:
        CTV_IDS.remove(target_user_id)
        await update.message.reply_text(f"‚úÖ Ng∆∞·ªùi d√πng ID {target_user_id} ƒë√£ b·ªã x√≥a kh·ªèi danh s√°ch CTV.")
    except KeyError:
        await update.message.reply_text(f"Ng∆∞·ªùi d√πng ID {target_user_id} kh√¥ng c√≥ trong danh s√°ch CTV.")


async def tb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå B·∫°n kh√¥ng ph·∫£i Admin ch√≠nh ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    if not context.args:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p n·ªôi dung th√¥ng b√°o. V√≠ d·ª•: /tb Bot s·∫Ω b·∫£o tr√¨ l√∫c 22h.")
        return

    broadcast_message = " ".join(context.args)
    
    sent_count = 0
    failed_count = 0
    # L·∫∑p qua m·ªôt b·∫£n sao c·ªßa user_data.keys() ƒë·ªÉ tr√°nh l·ªói thay ƒë·ªïi k√≠ch th∆∞·ªõc khi g·ª≠i
    for uid in list(user_data.keys()):
        try:
            await context.bot.send_message(chat_id=uid, text=f"üì¢ TH√îNG B√ÅO T·ª™ ADMIN:\n\n{broadcast_message}")
            sent_count += 1
            await asyncio.sleep(0.05) # Tr√°nh b·ªã flood limit c·ªßa Telegram
        except Exception as e:
            logger.warning(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o t·ªõi ng∆∞·ªùi d√πng {uid}: {e}")
            failed_count += 1
    
    await update.message.reply_text(f"‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o t·ªõi {sent_count} ng∆∞·ªùi d√πng. Th·∫•t b·∫°i: {failed_count}.")


# --- H√†m ch√≠nh ƒë·ªÉ ch·∫°y bot ---
def main():
    database.init_db() # Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu khi bot ch·∫°y
    prediction_engine.load_patterns() # T·∫£i c√°c m·∫´u t·ª´ dudoan.txt khi bot ch·∫°y
    
    # C√°c ki·ªÉm tra TELEGRAM_TOKEN v√† ADMIN_ID ƒë∆∞·ª£c th·ª±c hi·ªán ·ªü ƒë·∫ßu file
    # N·∫øu c√≥ l·ªói, ch∆∞∆°ng tr√¨nh s·∫Ω tho√°t s·ªõm

    keep_alive() # G·ªçi h√†m n√†y ƒë·ªÉ kh·ªüi ƒë·ªông server keep-alive (cho Render)
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # L·∫•y JobQueue t·ª´ ·ª©ng d·ª•ng
    job_queue = app.job_queue

    # ƒêƒÉng k√Ω t√°c v·ª• ƒë·ªãnh k·ª≥: ki·ªÉm tra API m·ªói 10 gi√¢y (ƒëi·ªÅu ch·ªânh theo t·∫ßn su·∫•t API c·∫≠p nh·∫≠t)
    job_queue.run_repeating(check_for_new_phien, interval=10, first=0) # first=0 ƒë·ªÉ ch·∫°y ngay khi bot kh·ªüi ƒë·ªông

    # ƒêƒÉng k√Ω c√°c l·ªánh
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("support", support))
    app.add_handler(CommandHandler("gia", gia))
    app.add_handler(CommandHandler("gopy", gopy))
    app.add_handler(CommandHandler("nap", nap))
    app.add_handler(CommandHandler("taixiu", taixiu))

    # L·ªánh cho Admin/CTV
    app.add_handler(CommandHandler("full", full))
    app.add_handler(CommandHandler("giahan", giahan))

    # L·ªánh cho Admin ch√≠nh
    app.add_handler(CommandHandler("ctv", ctv))
    app.add_handler(CommandHandler("xoactv", xoactv))
    app.add_handler(CommandHandler("tb", tb))

    logger.info("Bot ƒëang ch·∫°y... ƒêang l·∫Øng nghe c√°c c·∫≠p nh·∫≠t v√† ki·ªÉm tra API t·ª± ƒë·ªông.")
    app.run_polling(poll_interval=1.0) # L·∫Øng nghe update m·ªói 1 gi√¢y

if __name__ == '__main__':
    main()
